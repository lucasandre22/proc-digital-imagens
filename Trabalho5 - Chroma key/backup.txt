#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include "pdi.h"
#include <windows.h>

#define INPUT_IMAGE "2.bmp"
#define CANAIS_IMAGEM 3

void funcaoMilagrosa(Imagem* img, Imagem* mascara) {
    Imagem* copia = criaImagem(img->largura, img->altura, 3);
    for(int h = 0; h < 3; h++)
        for(int i = 0; i < img->altura; i++) {
            for(int j = 0; j < img->largura; j++) {
                copia->dados[h][i][j] = img->dados[h][i][j];
            }
        }
    float media = 0;
    float diff = 0;
    int cont = 0;
    for(int i = 0; i < img->altura; i++) {
        for(int j = 0; j < img->largura; j++) {
            if(mascara->dados[0][i][j] == 1.0f) {
                diff = (img->dados[0][i][j] + img->dados[2][i][j]) / 2;
                //media += (img->dados[1][i][j] - diff);
                if((img->dados[1][i][j] - diff) > 0.0f) {
                    media += (img->dados[1][i][j] - diff);
                    cont++;
                }
                //printf("%f\n", (img->dados[1][i][j] - diff));
                
            }
        }
    }
    printf("media diff: %f\n", media/cont);

}

/*void misturaDuasImagens(Imagem* img1, Imagem* img2, Imagem* out) {
    for(int h = 0; h < 3; h++) {
        for(int i = 0; i < img1->altura; i++) {
            for(int j = 0; j < img2->largura; j++) {
                out->dados[h][i][j] = (0.5 * img1->dados[h][i][j]) + (0.5 * img2->dados[h][i][j]);
            }
        }
    }
    //filtroSobel
}

void separaFundo(Imagem* img) {
    Imagem* magnitude = criaImagem(img->largura, img->altura, 1);
    Imagem* orientacao = criaImagem(img->largura, img->altura, 1);
    Imagem* escala_cinza = criaImagem(img->largura, img->altura, 1);
    Imagem* aux = criaImagem(img->largura, img->altura, 1);
    Imagem* mascara2 = criaImagem(img->largura, img->altura, 1);
    //RGBParaCinza(img, escala_cinza);

    for(int i = 0; i < img->altura; i++) {
        for(int j = 0; j < img->largura; j++) {
            if(img->dados[1][i][j] > img->dados[0][i][j] && img->dados[1][i][j] > img->dados[2][i][j]) {
                mascara2->dados[0][i][j] = 0;
            }
            else
                mascara2->dados[0][i][j] = img->dados[1][i][j];

            mascara->dados[0][i][j] = img->dados[1][i][j] - (0.65*img->dados[0][i][j] + 0.65*img->dados[2][i][j]);
            // mascara->dados[0][i][j] = img->dados[1][i][j] - (0.65*img->dados[0][i][j] + 0.3*img->dados[2][i][j]);
            //if(img->dados[1][i][j] > 0.2f)
                //mascara->dados[0][i][j] = img->dados[1][i][j];
           // else
                //mascara->dados[0][i][j] = 0;
            
            escala_cinza->dados[0][i][j] = img->dados[1][i][j];
        }
    }
    float media = 0;
    for(int i = 0; i < img->altura; i++) {
        for(int j = 0; j < img->largura; j++) {
            media += mascara->dados[0][i][j];
        }
    }
    media = media/(img->largura*img->largura);
    printf("media = %f", media);
    for(int i = 0; i < img->altura; i++) {
        for(int j = 0; j < img->largura; j++) {
            if(mascara->dados[0][i][j] > media)
                mascara->dados[0][i][j] = 0;
            else
                mascara->dados[0][i][j] = 1;
        }
    }
    /*for(int i = 0; i < img->altura; i++) {
        for(int j = 0; j < img->largura; j++) {
            if(mascara->dados[0][i][j] > media)
                mascara->dados[0][i][j] = 0;
            else
                mascara->dados[0][i][j] = 1;
        }
    }
    computaGradientes (escala_cinza, 1, NULL, NULL, magnitude, orientacao);

    for(int i = 0; i < img->altura; i++) {
        for(int j = 0; j < img->largura; j++) {
            if(mascara->dados[0][i][j] == 1) {
                aux->dados[0][i][j] = ((img->dados[1][i][j] + img->dados[0][i][j] + img->dados[2][i][j])/2);
            }
            else
            {
                aux->dados[0][i][j] = (1-img->dados[1][i][j]) + img->dados[0][i][j] + img->dados[2][i][j];
            }
        }
    }

    /*for(int i = 0; i < img->altura; i++) {
        for(int j = 0; j < img->largura; j++) {
            mascara2->dados[0][i][j] += mascara->dados[0][i][j];
        }
    }

    salvaImagem(mascara2, "img-mascara2.bmp");

    for(int i = 0; i < img->altura; i++) {
        for(int j = 0; j < img->largura; j++) {
            mascara->dados[0][i][j] += 2*magnitude->dados[0][i][j];
        }
    }
    //salvaImagem(aux, "aux.bmp");
    salvaImagem(magnitude, "img-mascara-magnitude.bmp");
    salvaImagem(mascara, "img-mascara.bmp");
    destroiImagem(magnitude);
    destroiImagem(orientacao);
}*/

/*void misturaDuasImagens(Imagem* img1, Imagem* img2, Imagem* out) {
    for(int h = 0; h < 3; h++) {
        for(int i = 0; i < img1->altura; i++) {
            for(int j = 0; j < img2->largura; j++) {
                out->dados[h][i][j] = (0.5 * img1->dados[h][i][j]) + (0.5 * img2->dados[h][i][j]);
            }
        }
    }
    //filtroSobel
}*/

/*void juntaFundo(Imagem* img, Imagem* mascara, Imagem* fundo) {
    for(int h = 0; h < 2; h++) {
        for(int i = 0; i < img->altura; i++) {
            for(int j = 0; j < img->largura; j++) {
                if(mascara->dados[0][i][j] != 0.0f) {
                    img->dados[h][i][j] = (1 - mascara->dados[0][i][j]) * img->dados[h][i][j];
                    img->dados[h][i][j] += mascara->dados[0][i][j] * fundo->dados[h][i][j];
                }
            }
        }
    }
    salvaImagem(img, "imagem-foda-key.bmp");
}*/

void arrumaTransicao(Imagem* mascara) {

    for(int i = 0; i < mascara->altura; i++) {
        for(int j = 0; j < mascara->largura - 1; j++) { 
            if(mascara->dados[0][i][j] == 1 && mascara->dados[0][i][j+1] == 0)
                mascara->dados[0][i][j] = 0.40;
                mascara->dados[0][i][j+1] = 0.70;
        }
    }
    for(int i = 0; i < mascara->altura - 1; i++) {
        for(int j = 0; j < mascara->largura; j++) { 
            if(mascara->dados[0][i][j] == 1 && mascara->dados[0][i+1][j] == 0)
                mascara->dados[0][i][j] = 0.40;
                mascara->dados[0][i+1][j] = 0.70;
        }
    }
}

void juntaFundo(Imagem* img, Imagem* mascara, Imagem* fundo) {
    float media;
    //arrumaTransicao(mascara);
    for(int i = 0; i < img->altura; i++) {
        for(int j = 0; j < img->largura; j++) { 
            if(img->dados[1][i][j] > img->dados[0][i][j] && img->dados[1][i][j] > img->dados[2][i][j])
                img->dados[1][i][j] = (img->dados[0][i][j] + img->dados[2][i][j])/2;
        }
    }
    for(int i = 0; i < img->altura; i++) {
        for(int j = 0; j < img->largura; j++) {
            if(mascara->dados[0][i][j] == 1.0f) {
                img->dados[0][i][j] = fundo->dados[0][i][j];
                img->dados[1][i][j] = fundo->dados[1][i][j];
                img->dados[2][i][j] = fundo->dados[2][i][j];
            }
            if(mascara->dados[0][i][j] != 1.0f && mascara->dados[0][i][j] != 0.0f) {

                img->dados[0][i][j] = mascara->dados[0][i][j] * img->dados[0][i][j];
                img->dados[1][i][j] = mascara->dados[0][i][j] * img->dados[1][i][j];
                img->dados[2][i][j] = mascara->dados[0][i][j] * img->dados[2][i][j];

                //img->dados[0][i][j] += ((1.0f-mascara->dados[0][i][j]) * fundo->dados[0][i][j]);
                //img->dados[1][i][j] += ((1.0f-mascara->dados[0][i][j]) * fundo->dados[1][i][j]);
                //img->dados[2][i][j] += ((1.0f-mascara->dados[0][i][j]) * fundo->dados[2][i][j]);
            }
        }
    }
    funcaoMilagrosa(img,mascara);
    salvaImagem(img, "imagem-foda-key.bmp");
}

/*void fazMascaraSeparacao(Imagem* img) {
    Imagem* mascara = criaImagem(img->largura, img->altura, 1);
    float media;
    float media_diferenca_rb = 0;
    for(int i = 0; i < img->altura; i++) {
        for(int j = 0; j < img->largura; j++) {
            if(fabs(img->dados[0][i][j] - img->dados[2][i][j]) < 0.300 && img->dados[1][i][j] > img->dados[0][i][j] && img->dados[1][i][j] > img->dados[2][i][j]) {
                mascara->dados[0][i][j] = img->dados[1][i][j] - (img->dados[0][i][j] + img->dados[2][i][j]);
                if(mascara->dados[0][i][j] < 0) {
                    mascara->dados[0][i][j] = 0;
                }
            }
            else {
                media = img->dados[0][i][j] + img->dados[1][i][j] + img->dados[2][i][j];
                media = media/3;
                mascara->dados[0][i][j] = 1.0f-media;
            }
        }
    }
    printf("Diferenca media: %f\n", media_diferenca_rb);
    salvaImagem(mascara, "imagem-foda-mascarona.bmp");
}*/

void fazMascaraSeparacao(Imagem* img) {
    Imagem* mascara = criaImagem(img->largura, img->altura, 1);
    float media;
    float media_diferenca_rb = 0;
    //descobrir verde da imagem
    for(int i = 0; i < img->altura; i++) {
        for(int j = 0; j < img->largura; j++) {
            
        }
    }
    printf("Diferenca media: %f\n", media_diferenca_rb);
    salvaImagem(mascara, "imagem-foda-mascarona.bmp");
}

void separaFundo(Imagem* img, Imagem* fundo) {
    Imagem* mascara = criaImagem(img->largura, img->altura, 1);
    Imagem* aux = criaImagem(img->largura, img->altura, 1);
    float media_diferenca_rb = 0;
    int cont = 0;
    for(int i = 0; i < img->altura; i++) {
        for(int j = 0; j < img->largura; j++) {
            if(img->dados[1][i][j] > img->dados[0][i][j] && img->dados[1][i][j] > img->dados[2][i][j]) {
                if(fabs(img->dados[0][i][j] - img->dados[2][i][j]) < 0.300) //0.400 0.800
                    if(fabs(img->dados[1][i][j] - img->dados[0][i][j]) > 0.150 && fabs(img->dados[1][i][j] - img->dados[2][i][j]) > 0.150) { //0.300
                        mascara->dados[0][i][j] = 1;
                        media_diferenca_rb += fabs(img->dados[0][i][j] - img->dados[2][i][j]);
                        cont++;
                    }
                       
            } else
                mascara->dados[0][i][j] = 0;
        }
    }
    //computaGradientes()
    //filtroGaussiano(mascara, aux, 3, 3, NULL);
    media_diferenca_rb = media_diferenca_rb/cont;
    printf("Diferenca media: %f\n", media_diferenca_rb);
    juntaFundo(img, mascara, fundo);
    salvaImagem(mascara, "imagem-foda.bmp");
    destroiImagem(mascara);
}

/**void separaFundo(Imagem* img, Imagem* fundo) {
    Imagem* mascara = criaImagem(img->largura, img->altura, 1);
    Imagem* magnitude = criaImagem(img->largura, img->altura, 3);
    Imagem* orientacao = criaImagem(img->largura, img->altura, 3);
    Imagem* magnitude_verde = criaImagem(img->largura, img->altura, 1);
    float media_diferenca_rb = 0;
    int cont = 0;
    for(int i = 0; i < img->altura; i++) {
        for(int j = 0; j < img->largura; j++) {
            if(img->dados[1][i][j] > img->dados[0][i][j] && img->dados[1][i][j] > img->dados[2][i][j]) {
                if(fabs(img->dados[0][i][j] - img->dados[2][i][j]) < 0.500) //0.400 0.800
                    if(fabs(img->dados[1][i][j] - img->dados[0][i][j]) > 0.200 && fabs(img->dados[1][i][j] - img->dados[2][i][j]) > 0.200) { 0.300
                        mascara->dados[0][i][j] = 2*img->dados[1][i][j];
                        media_diferenca_rb += fabs(img->dados[0][i][j] - img->dados[2][i][j]);
                        cont++;
                    }
                       
            } else
                mascara->dados[0][i][j] = fabs(img->dados[0][i][j] - img->dados[2][i][j]);
        }
    }
    computaGradientes (img, 3, NULL, NULL, magnitude, orientacao);
    media_diferenca_rb = media_diferenca_rb/cont;
    printf("Diferenca media: %f\n", media_diferenca_rb);
    //juntaFundo(img, mascara, fundo);
    salvaImagem(mascara, "imagem-foda.bmp");
    for(int i = 0; i < img->altura; i++) {
        for(int j = 0; j < img->largura; j++) {
            magnitude_verde->dados[0][i][j] = magnitude->dados[1][i][j];
        }
    }

    salvaImagem(magnitude_verde, "imagem-foda-magnitude.bmp");
    destroiImagem(mascara);
}**/

//void descobreVerde()

int main ()
{
    Imagem* img;
    Imagem* fundo;
    Imagem* fundo_aux;

    img = abreImagem(INPUT_IMAGE, CANAIS_IMAGEM);
    fundo_aux = abreImagem("fundo.bmp", CANAIS_IMAGEM);
    fundo = criaImagem(img->largura, img->altura, CANAIS_IMAGEM);
    redimensionaBilinear(fundo_aux, fundo);
    separaFundo(img, fundo);
    //fazMascaraSeparacao(img);
 
    salvaImagem(img, "magnitude.bmp");
    destroiImagem(img);

    printf("Pressione qualquer tecla (e de enter) para sair\n");
    scanf("%c");
    return 0;
}